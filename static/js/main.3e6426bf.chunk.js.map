{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","title","this","props","poster","Movie_MovieRanking","ranking","index","Movie_MovieStars","rating","genres","map","item","Movie_MovieGenere","key","genere","lib_default","text","summary","maxLine","ellipsis","trimRight","basedOn","Component","defaultProps","MovieRanking","_ref","newRanking","MovieStars","_ref2","ratingForStars","Math","round","stars","concat","MoviePoster","_ref3","src","alt","MovieGenere","_ref4","App","state","_callApi","fetch","then","response","json","data","movies","catch","err","console","log","_getMovieList","_callee","movieList","regenerator_default","wrap","_context","prev","next","_this","sent","setState","stop","_renderMovies","src_Movie_0","id","large_cover_image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e6426bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\nimport LinesEllipsis from \"react-lines-ellipsis\";\n\nclass Movie extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired\n  };\n\n  static defaultProps = {\n    title: \"(no data)\",\n    poster: \"(no data)\",\n    genres: \"(no data)\",\n    rating: \"(no data)\",\n    summary: \"(no data)\"\n  };\n\n  render() {\n    return (\n      <div className=\"movie-item\">\n        {/* <div>\n          <strong className=\"movie-info-title\">포스터:</strong>\n          <MoviePoster title={this.props.title} poster={this.props.poster} />\n        </div>\n        <div>\n          <strong className=\"movie-info-title\">타이틀:</strong>\n          <p>{this.props.title}</p>\n        </div>\n        <div>\n          <strong className=\"movie-info-title\">평점:</strong>\n          <p>\n            <MovieRating rating={this.props.rating} />\n          </p>\n        </div>\n        <div>\n          <strong className=\"movie-info-title\">장르:</strong>\n          {this.props.genres.map(item => {\n            return <MovieGenere genere={item} />;\n          })}\n        </div>\n        <div>\n          <strong className=\"movie-info-title\">설명:</strong>\n          <p>{this.props.summary}</p>\n        </div> */}\n\n        <div className=\"flex-row\">\n          <MoviePoster title={this.props.title} poster={this.props.poster} />\n          <div className=\"movie-info-container\">\n            <MovieRanking ranking={this.props.index} />\n            <div className=\"movie-info-title\">{this.props.title}</div>\n            <div className=\"movie-info-rating\">\n              <MovieStars rating={this.props.rating} />\n              <p className=\"rating-number\"> ({this.props.rating})</p>\n            </div>\n            <div className=\"movie-info-genere\">\n              {this.props.genres.map((item, index) => {\n                return <MovieGenere key={index} genere={item} />;\n              })}\n            </div>\n            <div className=\"movie-summary\">\n              {/* <p className=\"movie-sumamry-text\">{this.props.summary}</p> */}\n              {/* <p className=\"movie-sumamry-text\"></p> */}\n              <LinesEllipsis\n                className=\"movie-sumamry-text\"\n                text={this.props.summary}\n                maxLine=\"3\"\n                ellipsis=\"...\"\n                trimRight\n                basedOn=\"words\"\n              />\n              <button className=\"btn-more\">+ MORE</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst MovieRanking = ({ ranking }) => {\n  let newRanking = ranking;\n  newRanking++;\n  return (\n    <strong className=\"movie-ranking\">\n      {newRanking < 10 ? \"0\" + newRanking : newRanking}\n    </strong>\n  );\n};\n\nconst MovieStars = ({ rating }) => {\n  var ratingForStars = Math.round(rating); //1~2:별 1개, 3~4:별 2개, 5~6:별 3개, 7~8:별 4개, 9~10:별 5개\n  let stars = \"별 ?개\";\n  if (ratingForStars > 9) {\n    stars = \"star-5\";\n  } else if (ratingForStars > 7) {\n    stars = \"star-4\";\n  } else if (ratingForStars > 5) {\n    stars = \"star-3\";\n  } else if (ratingForStars > 3) {\n    stars = \"star-2\";\n  } else {\n    stars = \"star-1\";\n  }\n  return <p className={`rating-stars ${stars}`} />;\n};\n\nconst MoviePoster = ({ title, poster }) => {\n  return (\n    <div className=\"movie-poster\">\n      <img src={poster} alt={title} title={title} />\n    </div>\n  );\n};\n\nconst MovieGenere = ({ genere }) => {\n  return <span className=\"movie-genere-tag\">#{genere}</span>;\n};\n\nMoviePoster.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired\n};\n\nMovieGenere.propTypes = {\n  genere: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  // componentDidMount() {\n  //   setTimeout(() => {\n  //     this.setState({\n  //       movies: [\n  //         {\n  //           title: \"Toy Story\",\n  //           poster:\n  //             \"https://images-na.ssl-images-amazon.com/images/I/519fFTj6QnL._SY450_.jpg\"\n  //         },\n  //         {\n  //           title: \"Mission Impossible\",\n  //           poster:\n  //             \"https://m.media-amazon.com/images/M/MV5BMTk3NDY5MTU0NV5BMl5BanBnXkFtZTgwNDI3MDE1NTM@._V1_.jpg\"\n  //         },\n  //         {\n  //           title: \"IN TIME\",\n  //           poster:\n  //             \"https://static.tvtropes.org/pmwiki/pub/images/in_time_poster.jpg\"\n  //         },\n  //         {\n  //           title: \"Star Wars\",\n  //           poster:\n  //             \"https://lumiere-a.akamaihd.net/v1/images/sb_dolby_worldwide_handout_13x19_v3_lg_use_this_one_cc3cc869.jpeg?region=0%2C0%2C821%2C1200\"\n  //         },\n  //         {\n  //           title: \"TITANIC\",\n  //           poster:\n  //             \"https://images-na.ssl-images-amazon.com/images/I/71Asq17cUvL._RI_.jpg\"\n  //         }\n  //       ]\n  //     });\n  //   }, 5000);\n  // }\n\n  state = {};\n\n  componentDidMount() {\n    this._getMovieList();\n  }\n\n  _callApi = () => {\n    return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n    )\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  _getMovieList = async () => {\n    const movieList = await this._callApi();\n    this.setState({\n      movies: movieList\n    });\n  };\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((item, index) => {\n      console.log(this.state.movies);\n      return (\n        <Movie\n          index={index}\n          key={item.id}\n          title={item.title}\n          poster={item.large_cover_image}\n          genres={item.genres}\n          rating={item.rating}\n          summary={item.summary}\n        />\n      );\n    });\n    return movies;\n  };\n\n  render() {\n    const movies = this.state.movies;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? (\n          this._renderMovies()\n        ) : (\n          <p className=\"load-text\">\n            <div className=\"dot-container\">\n              <span className=\"dot\" />\n              <span className=\"dot\" />\n              <span className=\"dot\" />\n            </div>\n            <span>Loading</span>\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}